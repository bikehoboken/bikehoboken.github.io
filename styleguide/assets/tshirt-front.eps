%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.5.2 (Build 20G95) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 700 280
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 700 280
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
316.53867 105.36164 m
316.53867 248.19389 l
338.035 248.19389 l
347.60956 248.19389 355.23819 247.45383 360.92117 245.97369 c
366.66589 244.49356 371.51489 241.99588 375.46826 238.48056 c
379.4834 234.84189 382.66455 230.30905 385.01187 224.8819 c
387.42096 219.39307 388.62549 213.84264 388.62549 208.23047 c
388.62549 197.99287 384.70306 189.32805 376.85809 182.23573 c
384.45596 179.64549 390.44769 175.11266 394.83347 168.63707 c
399.28101 162.22316 401.50476 154.76093 401.50476 146.25015 c
401.50476 135.08746 397.55145 125.65176 389.64471 117.94273 c
384.88831 113.19396 379.54517 109.89454 373.61511 108.04437 c
367.12912 106.25588 359.00632 105.36164 349.24643 105.36164 c
316.53867 105.36164 l
h
338.12766 186.86113 m
344.89157 186.86113 l
352.92184 186.86113 358.80548 188.63419 362.54266 192.18034 c
366.27982 195.72649 368.14838 200.95314 368.14838 207.86043 c
368.14838 214.5827 366.23349 219.686 362.40366 223.1705 c
358.57385 226.65498 353.0145 228.39719 345.72549 228.39719 c
338.12766 228.39719 l
338.12766 186.86113 l
h
338.12766 125.62088 m
351.47018 125.62088 l
361.23007 125.62088 368.39545 127.53269 372.96652 131.35637 c
377.7847 135.48842 380.19373 140.73048 380.19373 147.08272 c
380.19373 153.24995 377.87735 158.43034 373.24448 162.62405 c
368.73517 166.75609 360.67413 168.82208 349.06113 168.82208 c
338.12766 168.82208 l
338.12766 125.62088 l
h
450.33478 248.19389 m
450.33478 105.36164 l
428.74579 105.36164 l
428.74579 248.19389 l
450.33478 248.19389 l
h
506.29935 191.209 m
561.98596 248.19389 l
590.80212 248.19389 l
526.12787 183.53085 l
591.17279 105.36164 l
562.26392 105.36164 l
510.74686 168.9146 l
506.29935 164.47421 l
506.29935 105.36164 l
484.71036 105.36164 l
484.71036 248.19389 l
506.29935 248.19389 l
506.29935 191.209 l
h
689.38873 227.93465 m
632.0343 227.93465 l
632.0343 193.61421 l
687.72095 193.61421 l
687.72095 173.35498 l
632.0343 173.35498 l
632.0343 125.62088 l
689.38873 125.62088 l
689.38873 105.36164 l
610.44537 105.36164 l
610.44537 248.19389 l
689.38873 248.19389 l
689.38873 227.93465 l
h
W*
0 0 700 280 rc
311.53867 253.19389 m
694.38873 253.19389 l
694.38873 100.36164 l
311.53867 100.36164 l
h
f
Q
q
325.56216 61.20369 m
349.82751 61.20369 l
349.82751 83.174789 l
358.31674 83.174789 l
358.31674 27.010248 l
349.82751 27.010248 l
349.82751 53.237347 l
325.56216 53.237347 l
325.56216 27.010248 l
317.07294 27.010248 l
317.07294 83.174789 l
325.56216 83.174789 l
325.56216 61.20369 l
h
368.99203 55.347153 m
368.99203 63.252911 371.89459 70.04303 377.69986 75.717712 c
383.48083 81.392395 390.42758 84.229698 398.54037 84.229698 c
406.556 84.229698 413.42987 81.368149 419.16226 75.644958 c
424.91895 69.921776 427.79724 63.04678 427.79724 55.019768 c
427.79724 46.944256 424.9068 40.093513 419.12582 34.467327 c
413.32059 28.816895 406.31308 25.99172 398.10315 25.99172 c
390.84052 25.99172 384.31882 28.50164 378.53784 33.521553 c
372.17395 39.074982 368.99203 46.350109 368.99203 55.347153 c
h
377.55411 55.238026 m
377.55411 49.029823 379.64301 43.92511 383.82086 39.923729 c
387.9744 35.922348 392.77155 33.921688 398.21246 33.921688 c
404.11487 33.921688 409.09421 35.958725 413.15057 40.032856 c
417.20697 44.155491 419.23514 49.175327 419.23514 55.092522 c
419.23514 61.082466 417.23126 66.102303 413.22345 70.152184 c
409.23993 74.226318 404.30917 76.263351 398.43106 76.263351 c
392.57724 76.263351 387.63434 74.226318 383.60223 70.152184 c
379.57013 66.126556 377.55411 61.155216 377.55411 55.238026 c
h
438.47253 27.010248 m
438.47253 83.174789 l
446.92532 83.174789 l
450.69025 83.174789 453.68997 82.883789 455.92462 82.301765 c
458.18356 81.719749 460.0903 80.73761 461.64484 79.355316 c
463.22366 77.924515 464.47458 76.142113 465.39758 74.008041 c
466.34488 71.849724 466.81854 69.667183 466.81854 67.460358 c
466.81854 63.434731 465.27615 60.027546 462.19135 57.238705 c
465.17899 56.220173 467.53506 54.437767 469.25964 51.891434 c
471.00851 49.36935 471.88293 46.435051 471.88293 43.08844 c
471.88293 38.699047 470.3284 34.988731 467.2193 31.957384 c
465.349 30.090075 463.24796 28.792677 460.91614 28.065153 c
458.36572 27.361879 455.17166 27.010248 451.33389 27.010248 c
438.47253 27.010248 l
h
446.96176 59.057507 m
449.62146 59.057507 l
452.77914 59.057507 455.09271 59.754704 456.56223 61.149124 c
458.03177 62.543545 458.76651 64.59877 458.76651 67.314857 c
458.76651 69.958191 458.01355 71.964912 456.50757 73.335083 c
455.00162 74.705254 452.81558 75.390327 449.94937 75.390327 c
446.96176 75.390327 l
446.96176 59.057507 l
h
446.96176 34.976593 m
452.20831 34.976593 l
456.04611 34.976593 458.86368 35.728355 460.6611 37.231903 c
462.55573 38.856709 463.50299 40.917995 463.50299 43.415825 c
463.50299 45.840904 462.59213 47.877937 460.77042 49.526993 c
458.99725 51.151794 455.82748 51.964184 451.26102 51.964184 c
446.96176 51.964184 l
446.96176 34.976593 l
h
479.35199 55.347153 m
479.35199 63.252911 482.25458 70.04303 488.05981 75.717712 c
493.84079 81.392395 500.78754 84.229698 508.90033 84.229698 c
516.91595 84.229698 523.78986 81.368149 529.52222 75.644958 c
535.27887 69.921776 538.15717 63.04678 538.15717 55.019768 c
538.15717 46.944256 535.26672 40.093513 529.48578 34.467327 c
523.68054 28.816895 516.67303 25.99172 508.4631 25.99172 c
501.20047 25.99172 494.67877 28.50164 488.8978 33.521553 c
482.53391 39.074982 479.35199 46.350109 479.35199 55.347153 c
h
487.91409 55.238026 m
487.91409 49.029823 490.00296 43.92511 494.18082 39.923729 c
498.33435 35.922348 503.1315 33.921688 508.57242 33.921688 c
514.47485 33.921688 519.45416 35.958725 523.51056 40.032856 c
527.56696 44.155491 529.59509 49.175327 529.59509 55.092522 c
529.59509 61.082466 527.59125 66.102303 523.58344 70.152184 c
519.59991 74.226318 514.66913 76.263351 508.79102 76.263351 c
502.93719 76.263351 497.99429 74.226318 493.96219 70.152184 c
489.93011 66.126556 487.91409 61.155216 487.91409 55.238026 c
h
557.32172 60.767178 m
579.21881 83.174789 l
590.54993 83.174789 l
565.11871 57.747971 l
590.69568 27.010248 l
579.32812 27.010248 l
559.07056 52.000561 l
557.32172 50.254513 l
557.32172 27.010248 l
548.83246 27.010248 l
548.83246 83.174789 l
557.32172 83.174789 l
557.32172 60.767178 l
h
629.31622 75.20845 m
606.76324 75.20845 l
606.76324 61.712952 l
628.6604 61.712952 l
628.6604 53.746609 l
606.76324 53.746609 l
606.76324 34.976593 l
629.31622 34.976593 l
629.31622 27.010248 l
598.27405 27.010248 l
598.27405 83.174789 l
629.31622 83.174789 l
629.31622 75.20845 l
h
640.46515 27.010248 m
640.46515 86.99427 l
681.49036 44.143345 l
681.49036 83.174789 l
689.97955 83.174789 l
689.97955 23.590904 l
648.95435 66.332703 l
648.95435 27.010248 l
640.46515 27.010248 l
h
W*
0 0 700 280 rc
312.07294 91.99427 m
694.97955 91.99427 l
694.97955 18.590904 l
312.07294 18.590904 l
h
f
Q
q
141.00002 269 m
149.10562 269 147.60574 247.67461 157.21121 246.22855 c
166.81668 244.78238 171.67645 265.6019 179.42191 263.21545 c
187.16742 260.82901 179.44121 240.89268 188.19315 236.68275 c
192.61946 234.55363 197.56642 238.22397 202.24158 241.78224 c
202.87733 242.2662 l
207.20917 245.56099 211.27373 248.52516 214.42982 246.37579 c
217.7408 244.12105 216.1725 238.88074 214.60056 233.36053 c
214.38663 232.60631 l
212.85994 227.19215 211.54144 221.62813 214.98184 218.43956 c
218.34224 215.32515 223.62585 216.90234 228.80028 218.77145 c
229.53851 219.03998 l
235.06647 221.06168 240.35796 223.17798 242.91319 219.97746 c
247.967 213.64754 230.33986 201.52264 235.19685 193.11977 c
237.49193 189.14917 243.01767 189.10577 248.52092 189.36955 c
249.28835 189.40797 l
255.16577 189.71234 260.8443 190.17555 262.34119 186.36581 c
263.78818 182.68317 259.65207 179.27275 255.29576 175.64415 c
254.68701 175.13637 l
250.32182 171.48642 245.98589 167.59549 247.04208 162.97319 c
249.20363 153.51367 270.38165 156.60124 270.98737 148.5276 c
271.28696 144.53516 266.20477 142.4926 260.90244 140.27776 c
260.19461 139.98123 l
260.19461 139.98123 l
259.48688 139.68155 l
254.53955 137.57013 249.80009 135.14427 249.46504 130.67856 c
249.12627 126.16322 253.55121 123.0397 258.1842 120.19012 c
258.84698 119.78477 l
259.06805 119.6502 259.28909 119.51613 259.50964 119.38244 c
260.16922 118.98238 l
264.76868 116.18825 268.92538 113.50836 268.08368 109.82482 c
267.17197 105.83476 261.48776 105.44744 255.63058 104.87344 c
254.86601 104.7972 l
249.38489 104.23875 243.92735 103.37323 242.2504 99.105309 c
240.61871 94.952614 243.80421 90.729492 247.32834 86.697083 c
247.85893 86.093681 l
248.12494 85.792732 248.39159 85.492928 248.657 85.194382 c
249.18561 84.598991 l
252.69109 80.641327 255.75143 76.920074 253.88809 73.696365 c
249.83525 66.684723 232.09569 78.644844 226.0392 71.058891 c
223.07974 67.352119 225.29613 61.967381 227.64354 56.787075 c
227.97144 56.065758 l
230.32013 50.908543 232.56519 46.043312 229.66182 43.352467 c
223.72002 37.845539 210.2979 54.497128 202.27191 49.031345 c
198.5264 46.480644 198.84044 41.077568 199.4986 35.682808 c
199.59456 34.912491 l
200.34207 29.011915 201.29016 23.284718 197.55757 21.489244 c
190.25465 17.97636 182.34273 37.839909 173.06026 34.979897 c
168.77608 33.659931 167.46298 28.504808 166.50301 23.217207 c
166.368 22.461334 l
165.32474 16.539534 164.5676 10.672634 160.42793 10.049375 c
152.41286 8.8427248 150.71402 30.153126 141.00002 30.153126 c
131.28601 30.153126 129.58717 8.8427248 121.5721 10.049375 c
117.25629 10.699156 116.61699 17.04834 115.49702 23.217207 c
115.3572 23.971279 l
114.40527 28.987076 113.01994 33.722786 108.93977 34.979897 c
99.657387 37.839909 91.745354 17.97636 84.442451 21.489244 c
80.953293 23.167622 81.554207 28.281612 82.258026 33.761284 c
82.356499 34.527954 l
82.372894 34.656025 82.389236 34.784218 82.405487 34.912491 c
82.50145 35.682808 l
83.15963 41.077568 83.473671 46.480644 79.728172 49.031345 c
71.702118 54.497128 58.280037 37.845539 52.338211 43.352467 c
49.434822 46.043312 51.679901 50.908543 54.028603 56.065758 c
54.356495 56.787075 l
56.703922 61.967381 58.92033 67.352119 55.960876 71.058891 c
49.904316 78.644844 32.164764 66.684723 28.111967 73.696365 c
26.015692 77.323036 30.150986 81.579414 34.141125 86.093681 c
34.671722 86.697083 l
38.19585 90.729492 41.381355 94.952614 39.749672 99.105309 c
36.20076 108.13742 15.719987 101.93145 13.916321 109.82482 c
13.074611 113.50836 17.231323 116.18825 21.830797 118.98238 c
22.490385 119.38244 l
22.710922 119.51613 22.931973 119.6502 23.153044 119.78477 c
23.815825 120.19012 l
28.448828 123.0397 32.873779 126.16322 32.535011 130.67856 c
32.19997 135.14427 27.460514 137.57013 22.51318 139.68155 c
21.805456 139.98123 l
21.805456 139.98123 l
21.097624 140.27776 l
15.795267 142.4926 10.713079 144.53516 11.012617 148.5276 c
11.61835 156.60124 32.796375 153.51367 34.957935 162.97319 c
37.119499 172.43279 16.697556 178.82924 19.658867 186.36581 c
21.15579 190.17555 26.834301 189.71234 32.71172 189.40797 c
33.479141 189.36955 l
38.98238 189.10577 44.508118 189.14917 46.803177 193.11977 c
51.66016 201.52264 34.033051 213.64754 39.086811 219.97746 c
41.642078 223.17798 46.933578 221.06168 52.461525 219.03998 c
53.199768 218.77145 l
58.374195 216.90234 63.657814 215.32515 67.018211 218.43956 c
70.458618 221.62813 69.140114 227.19215 67.613419 232.60631 c
67.399498 233.36053 l
65.827545 238.88074 64.259224 244.12105 67.570183 246.37579 c
70.726318 248.52516 74.790878 245.56099 79.122719 242.2662 c
79.758476 241.78224 l
84.433624 238.22397 89.380562 234.55363 93.806854 236.68275 c
102.55882 240.89268 94.832603 260.82901 102.57813 263.21545 c
110.32358 265.6019 115.18335 244.78238 124.78882 246.22855 c
134.39429 247.67461 132.89442 269 141.00002 269 c
h
141.76019 223.38356 m
94.455368 223.38356 56.107212 185.14684 56.107212 137.97945 c
56.107212 90.812065 94.455368 52.575344 141.76019 52.575344 c
189.06511 52.575344 227.41325 90.812065 227.41325 137.97945 c
227.41325 185.14684 189.06511 223.38356 141.76019 223.38356 c
h
W*
0 0 700 280 rc
6 274 m
276 274 l
276 5 l
6 5 l
h
f
Q
q
124.12689 211.62996 m
124.12689 163.38249 l
158.87311 163.38249 l
158.87311 212 l
164.57851 210.46339 l
166.91205 209.73378 169.20985 208.88834 171.46077 207.9313 c
173.69382 206.98196 175.88074 205.92284 178.01141 204.7594 c
180.13074 203.60217 182.19441 202.34174 184.19307 200.9845 c
186.18538 199.63158 188.11308 198.18237 189.96762 196.64395 c
190 80.382835 l
188.11308 78.817627 186.18538 77.368416 184.19307 76.015503 c
182.19441 74.658257 180.13074 73.397827 178.01141 72.240608 c
175.88074 71.077156 173.69382 70.018036 171.46077 69.068695 c
169.20985 68.111664 166.91205 67.266129 164.57851 66.536598 c
158.87311 65 l
158.87311 138.00471 l
124.12689 138.00471 l
124.12689 65.370041 l
119.97403 66.536598 l
117.6405 67.266129 115.34277 68.111664 113.09177 69.068695 c
110.8588 70.018036 108.67188 71.077156 106.54121 72.240608 c
104.42188 73.397827 102.3582 74.658257 100.35946 76.015503 c
98.367249 77.368416 96.439537 78.817627 94.584946 80.356041 c
93 81.708099 l
93 195.2919 l
94.584946 196.64395 l
96.439537 198.18237 98.367249 199.63158 100.35946 200.9845 c
102.3582 202.34174 104.42188 203.60217 106.54121 204.7594 c
108.67188 205.92284 110.8588 206.98196 113.09177 207.9313 c
115.34277 208.88834 117.6405 209.73378 119.97403 210.46339 c
124.12689 211.62996 l
h
W*
0 0 700 280 rc
88 217 m
195 217 l
195 60 l
88 60 l
h
f
ep
end
%%Trailer
%%EOF
