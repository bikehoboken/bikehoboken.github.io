%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.5.2 (Build 20G95) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 604 737
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 604 737
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
302.50003 708 m
318.49301 708 315.53363 665.9256 334.48596 663.07251 c
353.43829 660.2193 363.02701 701.29559 378.30936 696.58722 c
393.59189 691.87885 378.34747 652.54504 395.61572 644.23895 c
412.88416 635.93304 434.16879 672.36145 447.38269 663.36304 c
460.59677 654.36481 434.42191 621.26642 448.47186 608.24561 c
462.52185 595.22485 493.61121 623.76862 503.58258 611.27985 c
508.46863 605.16034 502.60989 596.29572 496.4906 586.89502 c
495.74072 585.74139 l
495.74072 585.74139 l
494.99249 584.58331 l
489.14917 575.49646 483.85352 566.08234 488.35764 558.29034 c
497.94089 541.71167 536.07269 559.83466 541.91553 544.96497 c
544.83698 537.53027 536.22412 530.6579 527.41406 523.31128 c
526.35669 522.42731 l
517.90131 515.33655 509.68204 507.77045 511.72919 498.81195 c
515.99408 480.14862 557.77997 486.2403 558.9751 470.31122 c
560.17041 454.38217 517.9422 454.18546 516.50989 435.09552 c
515.07751 416.00558 556.80463 409.52493 553.24591 393.95169 c
549.68719 378.37827 509.27707 390.62247 502.27481 372.80237 c
498.91373 364.24872 505.91214 355.54361 513.21497 347.27332 c
514.12866 346.24185 l
521.74402 337.66577 529.23511 329.58801 525.23688 322.6712 c
517.2403 308.83743 482.2388 332.43442 470.28888 317.46753 c
464.55286 310.28345 468.67136 299.90475 473.20911 289.85193 c
473.7778 288.59726 l
478.52396 278.16022 483.2984 268.23593 477.43658 262.80353 c
471.57477 257.371 462.02313 262.86804 451.95749 268.37521 c
450.74734 269.03543 l
441.04971 274.3063 430.99542 279.18402 423.3942 274.00778 c
407.55811 263.22394 428.50165 226.59879 414.09244 219.66797 c
399.68323 212.73714 384.07239 251.92738 365.75735 246.28467 c
357.14938 243.63266 354.62045 233.13402 352.71588 222.5032 c
352.47574 221.14595 l
350.45602 209.61334 348.89813 198.31165 340.83279 197.09741 c
325.01843 194.71672 321.6665 236.76157 302.50003 236.76157 c
283.33356 236.76157 279.98163 194.71672 264.16727 197.09741 c
256.10193 198.31165 254.54405 209.61334 252.52434 221.14595 c
252.28416 222.5032 l
250.37961 233.13402 247.85069 243.63266 239.24271 246.28467 c
220.92784 251.92738 205.31679 212.73714 190.90761 219.66797 c
183.41484 223.27199 185.48146 234.90536 186.96506 246.75934 c
187.13309 248.12764 l
188.39256 258.61862 188.89055 269.04721 181.60597 274.00778 c
174.00468 279.18402 163.95038 274.3063 154.25273 269.03543 c
153.04259 268.37521 l
142.97693 262.86804 133.42531 257.371 127.56347 262.80353 c
121.70164 268.23593 126.4761 278.16022 131.22226 288.59726 c
131.79099 289.85193 l
136.32875 299.90475 140.4473 310.28345 134.71127 317.46753 c
122.76121 332.43442 87.759712 308.83743 79.763229 322.6712 c
75.764984 329.58801 83.256081 337.66577 90.871445 346.24185 c
91.785156 347.27332 l
99.087997 355.54361 106.08641 364.24872 102.72531 372.80237 c
95.723038 390.62247 55.312897 378.37827 51.754124 393.95169 c
48.195354 409.52493 89.922546 416.00558 88.490234 435.09552 c
87.05793 454.18546 44.829739 454.38217 46.024895 470.31122 c
47.220051 486.2403 89.00592 480.14862 93.270851 498.81195 c
95.318016 507.77045 87.098785 515.33655 78.643417 522.42731 c
77.585991 523.31128 l
68.775955 530.6579 60.163162 537.53027 63.08461 544.96497 c
68.92749 559.83466 107.05922 541.71167 116.64242 558.29034 c
121.14652 566.08234 115.85088 575.49646 110.00755 584.58331 c
109.25934 585.74139 l
109.25934 585.74139 l
108.50945 586.89502 l
102.39014 596.29572 96.531425 605.16034 101.41744 611.27985 c
111.38889 623.76862 142.47826 595.22485 156.52824 608.24561 c
170.57822 621.26642 144.40331 654.36481 157.61732 663.36304 c
170.83134 672.36145 192.11595 635.93304 209.38429 644.23895 c
226.65259 652.54504 211.40819 691.87885 226.6907 696.58722 c
241.97305 701.29559 251.56177 660.2193 270.5141 663.07251 c
289.46643 665.9256 286.50705 708 302.50003 708 c
h
303.99994 618 m
210.66386 618 135 542.56 135 449.5 c
135 356.44 210.66386 281 303.99994 281 c
397.33618 281 473 356.44 473 449.5 c
473 542.56 397.33618 618 303.99994 618 c
h
W*
0 0 604 737 rc
41 713 m
564 713 l
564 192 l
41 192 l
h
f
Q
q
267.93289 594.26746 m
267.93289 498.75717 l
337.06711 498.75717 l
337.06711 595 l
348.4191 591.95819 l
353.0621 590.51379 357.63403 588.84021 362.11267 586.94562 c
366.55576 585.06635 370.90704 582.96973 375.14642 580.66656 c
379.36322 578.37573 383.4693 575.88062 387.44601 573.19379 c
391.41006 570.51556 395.24564 567.64673 398.93558 564.60132 c
399 334.45175 l
395.24564 331.35327 391.41006 328.48444 387.44601 325.80618 c
383.4693 323.11942 379.36322 320.62427 375.14642 318.33344 c
370.90704 316.0303 366.55576 313.93365 362.11267 312.05435 c
357.63403 310.15982 353.0621 308.48602 348.4191 307.04184 c
337.06711 304 l
337.06711 448.51953 l
267.93289 448.51953 l
267.93289 304.73251 l
259.66998 307.04184 l
255.02696 308.48602 250.4552 310.15982 245.97639 312.05435 c
241.53349 313.93365 237.18219 316.0303 232.94281 318.33344 c
228.726 320.62427 224.61993 323.11942 220.64305 325.80618 c
216.67915 328.48444 212.84361 331.35327 209.15355 334.39871 c
206 337.07523 l
206 561.9248 l
209.15355 564.60132 l
212.84361 567.64673 216.67915 570.51556 220.64305 573.19379 c
224.61993 575.88062 228.726 578.37573 232.94281 580.66656 c
237.18219 582.96973 241.53349 585.06635 245.97639 586.94562 c
250.4552 588.84021 255.02696 590.51379 259.66998 591.95819 c
267.93289 594.26746 l
h
W*
0 0 604 737 rc
201 600 m
404 600 l
404 299 l
201 299 l
h
f
Q
q
100.56641 92.586914 m
103.6569 92.586914 105.98624 93.256264 107.55444 94.594971 c
109.12264 95.933678 109.90674 97.673988 109.90674 99.815918 c
109.90674 101.02457 109.67342 102.07259 109.20679 102.95996 c
108.74015 103.84733 107.95605 104.66203 106.85449 105.40405 c
105.75293 106.14608 104.28418 106.86898 102.44824 107.57275 c
101.17838 108.06234 100.35986 108.4716 99.992676 108.80054 c
99.625488 109.12948 99.441895 109.48519 99.441895 109.86768 c
99.441895 110.23486 99.617836 110.60205 99.969727 110.96924 c
100.32162 111.33643 100.97184 111.52002 101.92041 111.52002 c
102.70068 111.52002 103.46183 111.4244 104.20386 111.23315 c
104.94588 111.04191 105.59229 110.82389 106.14307 110.5791 c
106.69385 110.33431 107.13371 110.11246 107.46265 109.91357 c
107.79159 109.71468 108.20084 109.46989 108.69043 109.1792 c
108.69043 109.1792 l
108.69043 114.89355 l
107.65006 115.42904 106.55233 115.84212 105.39722 116.13281 c
104.2421 116.4235 103.28589 116.60327 102.52856 116.67212 c
101.77124 116.74097 101.14779 116.77539 100.6582 116.77539 c
98.623375 116.77539 96.886879 116.43497 95.44873 115.75415 c
94.010582 115.07333 92.935791 114.19743 92.224365 113.12646 c
91.512939 112.0555 91.157227 110.93864 91.157227 109.77588 c
91.157227 108.13883 91.692711 106.75423 92.763672 105.62207 c
93.834633 104.48991 95.135094 103.58724 96.665039 102.91406 c
97.904297 102.39388 98.894936 101.94637 99.636963 101.57153 c
100.37899 101.19669 100.89917 100.86011 101.19751 100.56177 c
101.49585 100.26343 101.64502 99.923012 101.64502 99.540527 c
101.64502 98.408363 100.6123 97.842285 98.546875 97.842285 c
97.322914 97.842285 96.198402 98.048828 95.17334 98.461914 c
94.148277 98.875 92.939613 99.479332 91.547363 100.2749 c
91.547363 100.2749 l
91.547363 94.399902 l
93.138512 93.81852 94.607262 93.37101 95.953613 93.057373 c
97.299965 92.743736 98.837563 92.586914 100.56641 92.586914 c
h
124.93848 92.586914 m
126.31543 92.586914 127.75741 92.77816 129.2644 93.160645 c
130.77141 93.543129 131.95329 93.940918 132.81006 94.354004 c
132.81006 94.354004 l
132.81006 100.80273 l
130.66814 99.701172 128.93929 99.150391 127.62354 99.150391 c
126.61377 99.150391 125.86027 99.330162 125.36304 99.689697 c
124.86581 100.04923 124.56364 100.49674 124.45654 101.03223 c
124.34945 101.56771 124.2959 102.27148 124.2959 103.14355 c
124.2959 103.14355 l
124.2959 110.625 l
132.19043 110.625 l
132.19043 116.3623 l
124.2959 116.3623 l
124.2959 123.36182 l
123.35498 123.36182 l
112.27051 112.0708 l
112.27051 110.625 l
116.01123 110.625 l
116.01123 101.30762 l
116.01123 95.493813 118.98698 92.586914 124.93848 92.586914 c
h
144.65186 93 m
144.65186 103.05176 l
145.43213 105.17838 146.24683 106.63566 147.09595 107.42358 c
147.94507 108.21151 148.951 108.60547 150.11377 108.60547 c
151.39893 108.60547 152.66878 108.00879 153.92334 106.81543 c
153.92334 106.81543 l
156.97559 115.1001 l
156.01172 115.66618 155.18172 116.08691 154.4856 116.3623 c
153.78947 116.6377 152.97478 116.77539 152.0415 116.77539 c
150.26677 116.77539 148.72151 116.11369 147.40576 114.79028 c
146.09001 113.46688 145.17204 112.10905 144.65186 110.7168 c
144.65186 110.7168 l
144.65186 116.3623 l
136.39014 116.3623 l
136.39014 93 l
144.65186 93 l
h
169.98779 92.586914 m
172.6499 92.586914 174.84155 92.843178 176.56274 93.355713 c
178.28394 93.868248 179.74886 94.438148 180.95752 95.06543 c
180.95752 95.06543 l
180.95752 100.18311 l
177.59163 98.622559 174.51643 97.842285 171.73193 97.842285 c
170.14079 97.842285 168.71794 98.293617 167.46338 99.196289 c
166.20882 100.09896 165.4209 101.26172 165.09961 102.68457 c
165.09961 102.68457 l
181.5542 102.68457 l
181.5542 104.33691 l
181.5542 107.27441 180.9843 109.67261 179.84448 111.53149 c
178.70467 113.39038 177.25122 114.72909 175.48413 115.54761 c
173.71704 116.36613 171.88493 116.77539 169.98779 116.77539 c
167.1115 116.77539 164.66357 116.25903 162.64404 115.22632 c
160.62451 114.1936 159.11369 112.77075 158.11157 110.95776 c
157.10945 109.14478 156.6084 107.09082 156.6084 104.7959 c
156.6084 102.47038 157.10945 100.38965 158.11157 98.553711 c
159.11369 96.717773 160.62451 95.26432 162.64404 94.193359 c
164.66357 93.122398 167.1115 92.586914 169.98779 92.586914 c
h
173.79736 106.76953 m
164.87012 106.76953 l
164.87012 108.23828 165.29468 109.42782 166.1438 110.33813 c
166.99292 111.24845 168.10596 111.70361 169.48291 111.70361 c
170.87517 111.70361 171.94231 111.2561 172.68433 110.36108 c
173.42635 109.46606 173.79736 108.26888 173.79736 106.76953 c
173.79736 106.76953 l
h
198.00879 92.586914 m
200.6709 92.586914 202.86255 92.843178 204.58374 93.355713 c
206.30493 93.868248 207.76985 94.438148 208.97852 95.06543 c
208.97852 95.06543 l
208.97852 100.18311 l
205.61263 98.622559 202.53743 97.842285 199.75293 97.842285 c
198.16179 97.842285 196.73894 98.293617 195.48438 99.196289 c
194.22981 100.09896 193.44189 101.26172 193.12061 102.68457 c
193.12061 102.68457 l
209.5752 102.68457 l
209.5752 104.33691 l
209.5752 107.27441 209.00529 109.67261 207.86548 111.53149 c
206.72566 113.39038 205.27222 114.72909 203.50513 115.54761 c
201.73804 116.36613 199.90593 116.77539 198.00879 116.77539 c
195.13249 116.77539 192.68457 116.25903 190.66504 115.22632 c
188.64551 114.1936 187.13469 112.77075 186.13257 110.95776 c
185.13045 109.14478 184.62939 107.09082 184.62939 104.7959 c
184.62939 102.47038 185.13045 100.38965 186.13257 98.553711 c
187.13469 96.717773 188.64551 95.26432 190.66504 94.193359 c
192.68457 93.122398 195.13249 92.586914 198.00879 92.586914 c
h
201.81836 106.76953 m
192.89111 106.76953 l
192.89111 108.23828 193.31567 109.42782 194.16479 110.33813 c
195.01392 111.24845 196.12695 111.70361 197.50391 111.70361 c
198.89616 111.70361 199.9633 111.2561 200.70532 110.36108 c
201.44734 109.46606 201.81836 108.26888 201.81836 106.76953 c
201.81836 106.76953 l
h
224.19385 92.586914 m
225.5708 92.586914 227.01277 92.77816 228.51978 93.160645 c
230.02678 93.543129 231.20866 93.940918 232.06543 94.354004 c
232.06543 94.354004 l
232.06543 100.80273 l
229.92351 99.701172 228.19466 99.150391 226.87891 99.150391 c
225.86914 99.150391 225.11565 99.330162 224.61841 99.689697 c
224.12117 100.04923 223.81902 100.49674 223.71191 101.03223 c
223.60481 101.56771 223.55127 102.27148 223.55127 103.14355 c
223.55127 103.14355 l
223.55127 110.625 l
231.4458 110.625 l
231.4458 116.3623 l
223.55127 116.3623 l
223.55127 123.36182 l
222.61035 123.36182 l
211.52588 112.0708 l
211.52588 110.625 l
215.2666 110.625 l
215.2666 101.30762 l
215.2666 95.493813 218.24236 92.586914 224.19385 92.586914 c
h
244.61865 92.586914 m
247.70915 92.586914 250.0385 93.256264 251.60669 94.594971 c
253.17488 95.933678 253.95898 97.673988 253.95898 99.815918 c
253.95898 101.02457 253.72566 102.07259 253.25903 102.95996 c
252.7924 103.84733 252.0083 104.66203 250.90674 105.40405 c
249.80518 106.14608 248.33643 106.86898 246.50049 107.57275 c
245.23064 108.06234 244.41211 108.4716 244.04492 108.80054 c
243.67773 109.12948 243.49414 109.48519 243.49414 109.86768 c
243.49414 110.23486 243.67009 110.60205 244.02197 110.96924 c
244.37386 111.33643 245.02409 111.52002 245.97266 111.52002 c
246.75293 111.52002 247.51408 111.4244 248.2561 111.23315 c
248.99812 111.04191 249.64453 110.82389 250.19531 110.5791 c
250.74609 110.33431 251.18596 110.11246 251.51489 109.91357 c
251.84383 109.71468 252.2531 109.46989 252.74268 109.1792 c
252.74268 109.1792 l
252.74268 114.89355 l
251.70232 115.42904 250.60457 115.84212 249.44946 116.13281 c
248.29436 116.4235 247.33813 116.60327 246.58081 116.67212 c
245.82349 116.74097 245.20003 116.77539 244.71045 116.77539 c
242.67561 116.77539 240.93913 116.43497 239.50098 115.75415 c
238.06282 115.07333 236.98804 114.19743 236.27661 113.12646 c
235.56519 112.0555 235.20947 110.93864 235.20947 109.77588 c
235.20947 108.13883 235.74495 106.75423 236.81592 105.62207 c
237.88689 104.48991 239.18733 103.58724 240.71729 102.91406 c
241.95654 102.39388 242.94719 101.94637 243.68921 101.57153 c
244.43123 101.19669 244.95142 100.86011 245.24976 100.56177 c
245.5481 100.26343 245.69727 99.923012 245.69727 99.540527 c
245.69727 98.408363 244.66455 97.842285 242.59912 97.842285 c
241.37517 97.842285 240.25066 98.048828 239.22559 98.461914 c
238.20052 98.875 236.99187 99.479332 235.59961 100.2749 c
235.59961 100.2749 l
235.59961 94.399902 l
237.19075 93.81852 238.6595 93.37101 240.00586 93.057373 c
241.35222 92.743736 242.88982 92.586914 244.61865 92.586914 c
h
282.16357 93 m
282.16357 109.54639 l
286.34033 109.54639 l
286.34033 115.146 l
282.16357 115.146 l
282.16357 115.97217 l
282.16357 117.04313 282.4122 117.8693 282.90942 118.45068 c
283.40665 119.03207 284.09897 119.32275 284.98633 119.32275 c
285.7666 119.32275 286.78403 119.17741 288.03857 118.88672 c
288.03857 118.88672 l
288.03857 124.80762 l
286.64633 125.0983 285.26172 125.24365 283.88477 125.24365 c
281.45215 125.24365 279.4938 124.76937 278.00977 123.8208 c
276.52573 122.87223 275.46622 121.6674 274.8313 120.2063 c
274.19638 118.7452 273.87891 117.19613 273.87891 115.55908 c
273.87891 115.55908 l
273.87891 115.146 l
270.06934 115.146 l
270.06934 109.54639 l
273.87891 109.54639 l
273.87891 93 l
282.16357 93 l
h
302.12939 92.586914 m
305.021 92.586914 307.47275 93.114746 309.48462 94.17041 c
311.49649 95.226074 313.00732 96.664223 314.01709 98.484863 c
315.02686 100.3055 315.53174 102.37858 315.53174 104.7041 c
315.53174 106.46354 315.24869 108.06998 314.68262 109.52344 c
314.11655 110.97689 313.2789 112.24674 312.16968 113.33301 c
311.06046 114.41927 309.66055 115.26456 307.96997 115.8689 c
306.27939 116.47323 304.33252 116.77539 302.12939 116.77539 c
299.94156 116.77539 298.01382 116.47705 296.34619 115.88037 c
294.67856 115.28369 293.27481 114.43075 292.13501 113.32153 c
290.99521 112.21232 290.14609 110.93864 289.58765 109.50049 c
289.02921 108.06234 288.75 106.46354 288.75 104.7041 c
288.75 102.37858 289.25107 100.3055 290.25317 98.484863 c
291.25528 96.664223 292.7623 95.226074 294.77417 94.17041 c
296.78604 93.114746 299.23779 92.586914 302.12939 92.586914 c
h
302.12939 98.737305 m
300.63004 98.737305 299.47495 99.272789 298.66406 100.34375 c
297.85318 101.41471 297.44775 102.86816 297.44775 104.7041 c
297.44775 106.55534 297.84937 108.00497 298.65259 109.05298 c
299.45581 110.10099 300.61475 110.625 302.12939 110.625 c
303.65933 110.625 304.82593 110.10099 305.62915 109.05298 c
306.43237 108.00497 306.83398 106.55534 306.83398 104.7041 c
306.83398 102.85287 306.43237 101.39559 305.62915 100.33228 c
304.82593 99.268959 303.65933 98.737305 302.12939 98.737305 c
h
328.03906 93 m
328.03906 103.05176 l
328.81934 105.17838 329.63403 106.63566 330.48315 107.42358 c
331.33228 108.21151 332.33823 108.60547 333.50098 108.60547 c
334.78613 108.60547 336.056 108.00879 337.31055 106.81543 c
337.31055 106.81543 l
340.36279 115.1001 l
339.39893 115.66618 338.56894 116.08691 337.8728 116.3623 c
337.17667 116.6377 336.36197 116.77539 335.42871 116.77539 c
333.65396 116.77539 332.10873 116.11369 330.79297 114.79028 c
329.4772 113.46688 328.55923 112.10905 328.03906 110.7168 c
328.03906 110.7168 l
328.03906 116.3623 l
319.77734 116.3623 l
319.77734 93 l
328.03906 93 l
h
365.1709 82.374512 m
365.1709 94.354004 l
366.04297 93.81852 366.91885 93.390137 367.79858 93.068848 c
368.67831 92.747559 369.88315 92.586914 371.41309 92.586914 c
373.31021 92.586914 374.97403 92.92733 376.40454 93.608154 c
377.83505 94.288979 379.00546 95.2146 379.91577 96.38501 c
380.82608 97.55542 381.50308 98.867348 381.94678 100.3208 c
382.39047 101.77425 382.6123 103.28125 382.6123 104.8418 c
382.6123 107.5498 382.08447 109.79501 381.02881 111.57739 c
379.97314 113.35978 378.6268 114.67171 376.98975 115.51318 c
375.35269 116.35465 373.68506 116.77539 371.98682 116.77539 c
370.27328 116.77539 368.91544 116.53442 367.91333 116.05249 c
366.91122 115.57056 365.99707 114.97005 365.1709 114.25098 c
365.1709 114.25098 l
365.1709 116.3623 l
356.90918 116.3623 l
356.90918 82.374512 l
365.1709 82.374512 l
h
369.34766 98.507812 m
368.91928 98.507812 368.51767 98.553711 368.14282 98.645508 c
367.76797 98.737305 367.41611 98.852051 367.08716 98.989746 c
366.75821 99.127441 366.42929 99.291908 366.10034 99.483154 c
365.77139 99.6744 365.46158 99.846519 365.1709 99.999512 c
365.1709 99.999512 l
365.1709 108.92676 l
365.72168 109.40104 366.3107 109.79501 366.93799 110.10864 c
367.56528 110.42228 368.3685 110.5791 369.34766 110.5791 c
370.09732 110.5791 370.82407 110.38403 371.52783 109.9939 c
372.2316 109.60376 372.80533 108.96883 373.24902 108.08911 c
373.69272 107.20939 373.91455 106.06576 373.91455 104.6582 c
373.91455 102.76107 373.47852 101.26172 372.60645 100.16016 c
371.73438 99.058594 370.6481 98.507812 369.34766 98.507812 c
h
399.29639 92.586914 m
401.9585 92.586914 404.15015 92.843178 405.87134 93.355713 c
407.59253 93.868248 409.05746 94.438148 410.26611 95.06543 c
410.26611 95.06543 l
410.26611 100.18311 l
406.90024 98.622559 403.82504 97.842285 401.04053 97.842285 c
399.44937 97.842285 398.02652 98.293617 396.77197 99.196289 c
395.51743 100.09896 394.72949 101.26172 394.4082 102.68457 c
394.4082 102.68457 l
410.86279 102.68457 l
410.86279 104.33691 l
410.86279 107.27441 410.29288 109.67261 409.15308 111.53149 c
408.01328 113.39038 406.55981 114.72909 404.79272 115.54761 c
403.02563 116.36613 401.19351 116.77539 399.29639 116.77539 c
396.42007 116.77539 393.97217 116.25903 391.95264 115.22632 c
389.93311 114.1936 388.42227 112.77075 387.42017 110.95776 c
386.41806 109.14478 385.91699 107.09082 385.91699 104.7959 c
385.91699 102.47038 386.41806 100.38965 387.42017 98.553711 c
388.42227 96.717773 389.93311 95.26432 391.95264 94.193359 c
393.97217 93.122398 396.42007 92.586914 399.29639 92.586914 c
h
403.10596 106.76953 m
394.17871 106.76953 l
394.17871 108.23828 394.60327 109.42782 395.45239 110.33813 c
396.30151 111.24845 397.41455 111.70361 398.7915 111.70361 c
400.18375 111.70361 401.25089 111.2561 401.99292 110.36108 c
402.73495 109.46606 403.10596 108.26888 403.10596 106.76953 c
403.10596 106.76953 l
h
427.31738 92.586914 m
430.20898 92.586914 432.66074 93.114746 434.67261 94.17041 c
436.68448 95.226074 438.19531 96.664223 439.20508 98.484863 c
440.21484 100.3055 440.71973 102.37858 440.71973 104.7041 c
440.71973 106.46354 440.43668 108.06998 439.87061 109.52344 c
439.30453 110.97689 438.46689 112.24674 437.35767 113.33301 c
436.24844 114.41927 434.84854 115.26456 433.15796 115.8689 c
431.46738 116.47323 429.52051 116.77539 427.31738 116.77539 c
425.12955 116.77539 423.20181 116.47705 421.53418 115.88037 c
419.86655 115.28369 418.4628 114.43075 417.323 113.32153 c
416.1832 112.21232 415.33408 110.93864 414.77563 109.50049 c
414.21719 108.06234 413.93799 106.46354 413.93799 104.7041 c
413.93799 102.37858 414.43906 100.3055 415.44116 98.484863 c
416.44327 96.664223 417.95029 95.226074 419.96216 94.17041 c
421.97403 93.114746 424.42578 92.586914 427.31738 92.586914 c
h
427.31738 98.737305 m
425.81802 98.737305 424.66293 99.272789 423.85205 100.34375 c
423.04117 101.41471 422.63574 102.86816 422.63574 104.7041 c
422.63574 106.55534 423.03735 108.00497 423.84058 109.05298 c
424.6438 110.10099 425.80273 110.625 427.31738 110.625 c
428.84732 110.625 430.01392 110.10099 430.81714 109.05298 c
431.62036 108.00497 432.02197 106.55534 432.02197 104.7041 c
432.02197 102.85287 431.62036 101.39559 430.81714 100.33228 c
430.01392 99.268959 428.84732 98.737305 427.31738 98.737305 c
h
453.22705 82.374512 m
453.22705 94.354004 l
454.09912 93.81852 454.97501 93.390137 455.85474 93.068848 c
456.73447 92.747559 457.9393 92.586914 459.46924 92.586914 c
461.36636 92.586914 463.03018 92.92733 464.46069 93.608154 c
465.8912 94.288979 467.06161 95.2146 467.97192 96.38501 c
468.88223 97.55542 469.55923 98.867348 470.00293 100.3208 c
470.44662 101.77425 470.66846 103.28125 470.66846 104.8418 c
470.66846 107.5498 470.14062 109.79501 469.08496 111.57739 c
468.0293 113.35978 466.68295 114.67171 465.0459 115.51318 c
463.40884 116.35465 461.74121 116.77539 460.04297 116.77539 c
458.32944 116.77539 456.97159 116.53442 455.96948 116.05249 c
454.96738 115.57056 454.05322 114.97005 453.22705 114.25098 c
453.22705 114.25098 l
453.22705 116.3623 l
444.96533 116.3623 l
444.96533 82.374512 l
453.22705 82.374512 l
h
457.40381 98.507812 m
456.97543 98.507812 456.57382 98.553711 456.19897 98.645508 c
455.82413 98.737305 455.47226 98.852051 455.14331 98.989746 c
454.81436 99.127441 454.48544 99.291908 454.15649 99.483154 c
453.82755 99.6744 453.51773 99.846519 453.22705 99.999512 c
453.22705 99.999512 l
453.22705 108.92676 l
453.77783 109.40104 454.36685 109.79501 454.99414 110.10864 c
455.62143 110.42228 456.42465 110.5791 457.40381 110.5791 c
458.15347 110.5791 458.88022 110.38403 459.58398 109.9939 c
460.28775 109.60376 460.86148 108.96883 461.30518 108.08911 c
461.74887 107.20939 461.9707 106.06576 461.9707 104.6582 c
461.9707 102.76107 461.53467 101.26172 460.6626 100.16016 c
459.79053 99.058594 458.70425 98.507812 457.40381 98.507812 c
h
483.65771 93 m
483.65771 124.80762 l
475.37305 124.80762 l
475.37305 93 l
483.65771 93 l
h
501.7417 92.586914 m
504.40381 92.586914 506.59546 92.843178 508.31665 93.355713 c
510.03784 93.868248 511.50278 94.438148 512.71143 95.06543 c
512.71143 95.06543 l
512.71143 100.18311 l
509.34555 98.622559 506.27036 97.842285 503.48584 97.842285 c
501.89468 97.842285 500.47183 98.293617 499.21729 99.196289 c
497.96274 100.09896 497.1748 101.26172 496.85352 102.68457 c
496.85352 102.68457 l
513.30811 102.68457 l
513.30811 104.33691 l
513.30811 107.27441 512.73822 109.67261 511.59839 111.53149 c
510.45859 113.39038 509.00513 114.72909 507.23804 115.54761 c
505.47095 116.36613 503.63882 116.77539 501.7417 116.77539 c
498.86539 116.77539 496.41748 116.25903 494.39795 115.22632 c
492.37842 114.1936 490.86758 112.77075 489.86548 110.95776 c
488.86337 109.14478 488.3623 107.09082 488.3623 104.7959 c
488.3623 102.47038 488.86337 100.38965 489.86548 98.553711 c
490.86758 96.717773 492.37842 95.26432 494.39795 94.193359 c
496.41748 93.122398 498.86539 92.586914 501.7417 92.586914 c
h
505.55127 106.76953 m
496.62402 106.76953 l
496.62402 108.23828 497.04858 109.42782 497.89771 110.33813 c
498.74683 111.24845 499.85986 111.70361 501.23682 111.70361 c
502.62906 111.70361 503.6962 111.2561 504.43823 110.36108 c
505.18027 109.46606 505.55127 108.26888 505.55127 106.76953 c
505.55127 106.76953 l
h
W
0 0 604 737 rc
86.157227 130.24365 m
518.30811 130.24365 l
518.30811 77.374512 l
86.157227 77.374512 l
h
f
ep
end
%%Trailer
%%EOF
